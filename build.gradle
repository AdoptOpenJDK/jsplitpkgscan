plugins {
    id 'java-library'
    id 'signing'
    id 'maven'
    id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
    id "com.github.ben-manes.versions" version "0.20.0"
}

group = 'org.adoptopenjdk'

ext.mainClassName = 'jdk.Main'
javaModule.name = 'jsplitpkgscan'

sourceCompatibility = 11
targetCompatibility = 11

// Uncomment the section below if you want to just ./gradlew install locally
/*
repositories {
    mavenLocal()
}
*/

jar {
    manifest {
        attributes 'Main-Class': mainClassName,
                   'Automatic-Module-Name': 'org.adoptopenjdk.jsplitpkgscan'
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

jar.doLast {
    // temporary work around to enable main class
    // using the jar executable
    exec {
        commandLine  System.properties['java.home'] + '/bin/jar',
                '--update',
                '--main-class',
                mainClassName,
                '--file',
                jar.archivePath
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    destinationDir file("${project.buildDir}/libs_other")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    destinationDir file("${project.buildDir}/libs_other")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { project.hasProperty('signing.password') && !project.version.contains('-SNAPSHOT') }
    sign configurations.archives
}

/*
 * Comment out this whole section if you don't want to upload the artifact on
 * a ./gradlew install
 */
uploadArchives {

    if (!project.hasProperty('signing.password')) {
        println "no archives will be uploaded due missing signing password"
        return
    }

    repositories.mavenDeployer {
        beforeDeployment { 
            MavenDeployment deployment -> signing.signPom(deployment)
        }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
            //proxy(host: '127.0.0.1', port: 3128, type: 'http')
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
            //proxy(host: '127.0.0.1', port: 3128, type: 'http')
        }

        pom.project {
            name 'Split package scanner'
            packaging 'jar'
            description 'Tool to scan existing JAR/WAR files for split packages'
            url 'https://github.com/AdoptOpenJDK/jsplitpkgscan'
            
            scm {
                connection 'scm:git://github.com/AdoptOpenJDK/jsplitpkgscan.git'
                developerConnection 'scm:git://github.com/AdoptOpenJDK/jsplitpkgscan.git'
                url 'https://github.com/AdoptOpenJDK/jsplitpkgscan'
            }

            licenses {
                license {
                    name 'GNU General Public License, version 2, with the Classpath Exception'
                    url 'http://openjdk.java.net/legal/gplv2+ce.html'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'reinhapa'
                    name 'Patrick Reinhart'
                    email 'patrick@reini.net'
                }
            }
        }
    }
}
